1 - 
Class Person:
		attributes: name, age
		methods: say_hello, say_age

class SuperHero: that inherits from person
		 attributes += secret_identity, nemesis
		 methods: reveal_secret_identity, say_hello, old_say_age, say_age



----------------------------------------------------------------------------------------------------------------------------------

2 - A Queue is a linear structure which follows a particular order in which the operations are performed.
The order is First In First Out (FIFO). A good example of a queue is any queue of consumers for a
resource where the consumer that came first is served first.

We need to implement a python class that represents the queue data structure:

	The class should have these operations:
		- enqueue(value) => inserts a new value at the rear of the queue
		- dequeue() 	 => returns and removes a value from the front of the queue.
				    We should return None and print a warning message if we tried to pop value from an empty queue
		- is_empty() 	 => which returns True or False to represent whether the queue is empty or not

----------------------------------------------------------------------------------------------------------------------------------

3 - We need to implement another queue class that has the same properties as previous but with the following changes:
	A. The queue should have a name that is provided as a parameter for its initializer
	B. The queue should have a size that is provided as a parameter of its initializer 
	   and if we tried to insert more values than its size raises a custom created exception called QueueOutOfRangeException
	C. The Queue class keeps track of all queues instances that has been created through this class 
	   and we can get any queue of them using its name
	D. The queue class should have two class methods called (save, load) 
	   which saves all created queues instances to a file and load them when needed. (bonus)





